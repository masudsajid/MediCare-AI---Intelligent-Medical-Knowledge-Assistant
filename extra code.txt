# app code
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq
from dotenv import load_dotenv
from flask import Flask, request, jsonify, render_template
from src.prompt import prompt
from src.loader import *
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains.retrieval import create_retrieval_chain
from langchain_pinecone import PineconeVectorStore
import os

load_dotenv()

app = Flask(__name__)

embeddings = embedding_function()

index_name_3 = "project-2"

vectore_store = PineconeVectorStore.from_existing_index(
    index_name=index_name_3,
    embedding=embeddings
)

retriever = vectore_store.as_retriever(search_type="similarity", search_kwargs={"k": 1})

llm = ChatGroq(model="llama-3.1-8b-instant")

sys_prompt = ChatPromptTemplate.from_messages([
    ("system", prompt),
    ("human", "{input}")
])

create_stuff = create_stuff_documents_chain(prompt=sys_prompt, llm=llm)
chain = create_retrieval_chain(retriever, create_stuff)


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/get", methods=["POST"])
def chatbot():
    try:
        data = request.get_json(silent=True)
        msg = data.get("msg") if data else None

        if not msg or not msg.strip():
            return jsonify({"error": "Empty message"}), 400

        print("User:", msg)
        response = chain.invoke({"input": msg})
        print("Bot:", response["answer"])
        return jsonify({"answer": response["answer"]})

    except Exception as e:
        print("Error:", str(e))
        return jsonify({"error": "Something went wrong while processing your request."}), 500


if __name__ == "__main__":
    app.run("0.0.0.0", port=8080, debug=True)


# html code:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Medical Chatbot</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
  <div class="chat-container">
    <h1>ü©∫ Medical Chatbot</h1>
    <div id="chat-box" class="chat-box"></div>
    <form id="chat-form">
      <input type="text" id="user-input" placeholder="Type your message..." autocomplete="off" required />
      <button type="submit">Send</button>
    </form>
  </div>

  <script>
    const chatForm = document.getElementById("chat-form");
    const chatBox = document.getElementById("chat-box");
    const userInput = document.getElementById("user-input");

    chatForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const msg = userInput.value.trim();
      if (!msg) return;

      appendMessage("You", msg);
      userInput.value = "";

      try {
        const response = await fetch("/get", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ msg: msg })
        });

        const data = await response.json();
        if (data.answer) {
          appendMessage("Bot", data.answer);
        } else {
          appendMessage("Bot", "‚ö†Ô∏è " + (data.error || "Unknown error"));
        }
      } catch (error) {
        appendMessage("Bot", "‚ö†Ô∏è Network or server error.");
      }
    });

    function appendMessage(sender, message) {
      const msgDiv = document.createElement("div");
      msgDiv.className = `msg ${sender === "You" ? "user" : "bot"}`;
      msgDiv.innerHTML = `<strong>${sender}:</strong> ${message}`;
      chatBox.appendChild(msgDiv);
      chatBox.scrollTop = chatBox.scrollHeight;
    }
  </script>
</body>
</html>
